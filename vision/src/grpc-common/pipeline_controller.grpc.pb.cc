// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: pipeline_controller.proto

#include "pipeline_controller.pb.h"
#include "pipeline_controller.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace Vision {

static const char* PipelineController_method_names[] = {
  "/Vision.PipelineController/GetThresholds",
  "/Vision.PipelineController/SetThresholds",
};

std::unique_ptr< PipelineController::Stub> PipelineController::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< PipelineController::Stub> stub(new PipelineController::Stub(channel));
  return stub;
}

PipelineController::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_GetThresholds_(PipelineController_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetThresholds_(PipelineController_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status PipelineController::Stub::GetThresholds(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::Vision::Thresholds* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetThresholds_, context, request, response);
}

void PipelineController::Stub::experimental_async::GetThresholds(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::Vision::Thresholds* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetThresholds_, context, request, response, std::move(f));
}

void PipelineController::Stub::experimental_async::GetThresholds(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Vision::Thresholds* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetThresholds_, context, request, response, std::move(f));
}

void PipelineController::Stub::experimental_async::GetThresholds(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::Vision::Thresholds* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetThresholds_, context, request, response, reactor);
}

void PipelineController::Stub::experimental_async::GetThresholds(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Vision::Thresholds* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetThresholds_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Vision::Thresholds>* PipelineController::Stub::AsyncGetThresholdsRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Vision::Thresholds>::Create(channel_.get(), cq, rpcmethod_GetThresholds_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::Vision::Thresholds>* PipelineController::Stub::PrepareAsyncGetThresholdsRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Vision::Thresholds>::Create(channel_.get(), cq, rpcmethod_GetThresholds_, context, request, false);
}

::grpc::Status PipelineController::Stub::SetThresholds(::grpc::ClientContext* context, const ::Vision::Thresholds& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SetThresholds_, context, request, response);
}

void PipelineController::Stub::experimental_async::SetThresholds(::grpc::ClientContext* context, const ::Vision::Thresholds* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetThresholds_, context, request, response, std::move(f));
}

void PipelineController::Stub::experimental_async::SetThresholds(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetThresholds_, context, request, response, std::move(f));
}

void PipelineController::Stub::experimental_async::SetThresholds(::grpc::ClientContext* context, const ::Vision::Thresholds* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetThresholds_, context, request, response, reactor);
}

void PipelineController::Stub::experimental_async::SetThresholds(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetThresholds_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* PipelineController::Stub::AsyncSetThresholdsRaw(::grpc::ClientContext* context, const ::Vision::Thresholds& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_SetThresholds_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* PipelineController::Stub::PrepareAsyncSetThresholdsRaw(::grpc::ClientContext* context, const ::Vision::Thresholds& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_SetThresholds_, context, request, false);
}

PipelineController::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PipelineController_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< PipelineController::Service, ::google::protobuf::Empty, ::Vision::Thresholds>(
          std::mem_fn(&PipelineController::Service::GetThresholds), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PipelineController_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< PipelineController::Service, ::Vision::Thresholds, ::google::protobuf::Empty>(
          std::mem_fn(&PipelineController::Service::SetThresholds), this)));
}

PipelineController::Service::~Service() {
}

::grpc::Status PipelineController::Service::GetThresholds(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::Vision::Thresholds* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status PipelineController::Service::SetThresholds(::grpc::ServerContext* context, const ::Vision::Thresholds* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace Vision

