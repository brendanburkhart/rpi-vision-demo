// Code generated by protoc-gen-go. DO NOT EDIT.
// source: pipeline_controller.proto

package Vision

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Thresholds struct {
	Low                  int32    `protobuf:"varint,1,opt,name=low,proto3" json:"low,omitempty"`
	High                 int32    `protobuf:"varint,2,opt,name=high,proto3" json:"high,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Thresholds) Reset()         { *m = Thresholds{} }
func (m *Thresholds) String() string { return proto.CompactTextString(m) }
func (*Thresholds) ProtoMessage()    {}
func (*Thresholds) Descriptor() ([]byte, []int) {
	return fileDescriptor_c3c26e46d9f3ddf1, []int{0}
}

func (m *Thresholds) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Thresholds.Unmarshal(m, b)
}
func (m *Thresholds) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Thresholds.Marshal(b, m, deterministic)
}
func (m *Thresholds) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Thresholds.Merge(m, src)
}
func (m *Thresholds) XXX_Size() int {
	return xxx_messageInfo_Thresholds.Size(m)
}
func (m *Thresholds) XXX_DiscardUnknown() {
	xxx_messageInfo_Thresholds.DiscardUnknown(m)
}

var xxx_messageInfo_Thresholds proto.InternalMessageInfo

func (m *Thresholds) GetLow() int32 {
	if m != nil {
		return m.Low
	}
	return 0
}

func (m *Thresholds) GetHigh() int32 {
	if m != nil {
		return m.High
	}
	return 0
}

func init() {
	proto.RegisterType((*Thresholds)(nil), "Vision.Thresholds")
}

func init() {
	proto.RegisterFile("pipeline_controller.proto", fileDescriptor_c3c26e46d9f3ddf1)
}

var fileDescriptor_c3c26e46d9f3ddf1 = []byte{
	// 184 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x2c, 0xc8, 0x2c, 0x48,
	0xcd, 0xc9, 0xcc, 0x4b, 0x8d, 0x4f, 0xce, 0xcf, 0x2b, 0x29, 0xca, 0xcf, 0xc9, 0x49, 0x2d, 0xd2,
	0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x0b, 0xcb, 0x2c, 0xce, 0xcc, 0xcf, 0x93, 0x92, 0x4e,
	0xcf, 0xcf, 0x4f, 0xcf, 0x49, 0xd5, 0x07, 0x8b, 0x26, 0x95, 0xa6, 0xe9, 0xa7, 0xe6, 0x16, 0x94,
	0x54, 0x42, 0x14, 0x29, 0x19, 0x71, 0x71, 0x85, 0x64, 0x14, 0xa5, 0x16, 0x67, 0xe4, 0xe7, 0xa4,
	0x14, 0x0b, 0x09, 0x70, 0x31, 0xe7, 0xe4, 0x97, 0x4b, 0x30, 0x2a, 0x30, 0x6a, 0xb0, 0x06, 0x81,
	0x98, 0x42, 0x42, 0x5c, 0x2c, 0x19, 0x99, 0xe9, 0x19, 0x12, 0x4c, 0x60, 0x21, 0x30, 0xdb, 0x68,
	0x12, 0x23, 0x97, 0x50, 0x00, 0xd4, 0x5a, 0x67, 0xb8, 0xad, 0x42, 0xb6, 0x5c, 0xbc, 0xee, 0xa9,
	0x25, 0x48, 0xa6, 0x89, 0xe9, 0x41, 0x6c, 0xd6, 0x83, 0xd9, 0xac, 0xe7, 0x0a, 0xb2, 0x59, 0x4a,
	0x48, 0x0f, 0xe2, 0x32, 0x3d, 0x84, 0x5a, 0x25, 0x06, 0x90, 0xf6, 0x60, 0x14, 0xed, 0x58, 0x94,
	0x49, 0xe1, 0x30, 0x52, 0x89, 0x21, 0x89, 0x0d, 0x2c, 0x62, 0x0c, 0x08, 0x00, 0x00, 0xff, 0xff,
	0xee, 0xd5, 0x6d, 0x07, 0x11, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// PipelineControllerClient is the client API for PipelineController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PipelineControllerClient interface {
	GetThresholds(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Thresholds, error)
	SetThresholds(ctx context.Context, in *Thresholds, opts ...grpc.CallOption) (*empty.Empty, error)
}

type pipelineControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewPipelineControllerClient(cc grpc.ClientConnInterface) PipelineControllerClient {
	return &pipelineControllerClient{cc}
}

func (c *pipelineControllerClient) GetThresholds(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Thresholds, error) {
	out := new(Thresholds)
	err := c.cc.Invoke(ctx, "/Vision.PipelineController/GetThresholds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pipelineControllerClient) SetThresholds(ctx context.Context, in *Thresholds, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/Vision.PipelineController/SetThresholds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PipelineControllerServer is the server API for PipelineController service.
type PipelineControllerServer interface {
	GetThresholds(context.Context, *empty.Empty) (*Thresholds, error)
	SetThresholds(context.Context, *Thresholds) (*empty.Empty, error)
}

// UnimplementedPipelineControllerServer can be embedded to have forward compatible implementations.
type UnimplementedPipelineControllerServer struct {
}

func (*UnimplementedPipelineControllerServer) GetThresholds(ctx context.Context, req *empty.Empty) (*Thresholds, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetThresholds not implemented")
}
func (*UnimplementedPipelineControllerServer) SetThresholds(ctx context.Context, req *Thresholds) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetThresholds not implemented")
}

func RegisterPipelineControllerServer(s *grpc.Server, srv PipelineControllerServer) {
	s.RegisterService(&_PipelineController_serviceDesc, srv)
}

func _PipelineController_GetThresholds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelineControllerServer).GetThresholds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Vision.PipelineController/GetThresholds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelineControllerServer).GetThresholds(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _PipelineController_SetThresholds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Thresholds)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelineControllerServer).SetThresholds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Vision.PipelineController/SetThresholds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelineControllerServer).SetThresholds(ctx, req.(*Thresholds))
	}
	return interceptor(ctx, in, info, handler)
}

var _PipelineController_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Vision.PipelineController",
	HandlerType: (*PipelineControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetThresholds",
			Handler:    _PipelineController_GetThresholds_Handler,
		},
		{
			MethodName: "SetThresholds",
			Handler:    _PipelineController_SetThresholds_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pipeline_controller.proto",
}
